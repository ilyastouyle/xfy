{"ast":null,"code":"let Animations = {\n  morph: (curve1, curve2, time\n  /*time in seconds*/\n  , fps\n  /*frames per second*/\n  , executewithin, executeafter = null) => {\n    let k = 0;\n    let tab1,\n        tab2 = [];\n    let nbf = time * (fps / 1000);\n    var maininterval = window.setInterval(function () {\n      if (k <= nbf) {\n        if (k == 0) {\n          for (let i = 0; i < curve1.X.length; i++) {\n            tab1[i] = curve1.X[i];\n            tab2[i] = curve1.Y[i];\n          }\n        } else {\n          for (let i = 0; i < curve1.X.length; i++) {\n            //console.log((curve2.Y)[i] + (curve1.Y)[i])/2\n            tab1[i] = k * (curve2.X[curve2.X.length - 1 - i] - curve1.X[i]) / nbf + curve1.X[i];\n            let ai = (curve1.Y[i] - curve2.Y[curve2.Y.length - 1 - i]) / (curve1.X[i] - curve2.X[curve2.X.length - 1 - i]);\n            let bi = curve1.Y[i] - ai * curve1.X[i];\n            tab2[i] = ai * tab1[i] + bi;\n          }\n        } //console.log(tab2);\n\n\n        executewithin(tab1, tab2); //(new Curve2d(tab1, tab2, \"#3A539B\", 3)).draw();\n        //console.log(\"Iteration number \" + k);\n      } else {\n        window.clearInterval(maininterval);\n        executeafter(); //tab2 = [];\t\n      }\n\n      k++;\n    }, time / nbf);\n    return maininterval;\n  }\n};\nexport default Animations;","map":{"version":3,"sources":["/var/www/html/xfy/src/Animations.js"],"names":["Animations","morph","curve1","curve2","time","fps","executewithin","executeafter","k","tab1","tab2","nbf","maininterval","window","setInterval","i","X","length","Y","ai","bi","clearInterval"],"mappings":"AAAA,IAAIA,UAAU,GAAG;AAChBC,EAAAA,KAAK,EAAE,CAACC,MAAD,EAASC,MAAT,EAAiBC;AAAK;AAAtB,IAA2CC;AAAI;AAA/C,IAAqEC,aAArE,EAAoFC,YAAY,GAAG,IAAnG,KAA4G;AAClH,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,IAAJ;AAAA,QAAUC,IAAI,GAAG,EAAjB;AACA,QAAIC,GAAG,GAAGP,IAAI,IAAEC,GAAG,GAAC,IAAN,CAAd;AACA,QAAIO,YAAY,GAAGC,MAAM,CAACC,WAAP,CAAmB,YAAU;AAC/C,UAAGN,CAAC,IAAIG,GAAR,EAAY;AACX,YAAGH,CAAC,IAAI,CAAR,EAAU;AACT,eAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGb,MAAM,CAACc,CAAP,CAASC,MAA5B,EAAoCF,CAAC,EAArC,EAAwC;AACvCN,YAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUb,MAAM,CAACc,CAAP,CAASD,CAAT,CAAV;AACAL,YAAAA,IAAI,CAACK,CAAD,CAAJ,GAAUb,MAAM,CAACgB,CAAP,CAASH,CAAT,CAAV;AACA;AACD,SALD,MAMI;AACH,eAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGb,MAAM,CAACc,CAAP,CAASC,MAA5B,EAAoCF,CAAC,EAArC,EAAwC;AACvC;AACAN,YAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUP,CAAC,IAAEL,MAAM,CAACa,CAAP,CAASb,MAAM,CAACa,CAAP,CAASC,MAAT,GAAkB,CAAlB,GAAsBF,CAA/B,IAAoCb,MAAM,CAACc,CAAP,CAASD,CAAT,CAAtC,CAAD,GAAoDJ,GAApD,GAA0DT,MAAM,CAACc,CAAP,CAASD,CAAT,CAApE;AACA,gBAAII,EAAE,GAAG,CAACjB,MAAM,CAACgB,CAAP,CAASH,CAAT,IAAcZ,MAAM,CAACe,CAAP,CAASf,MAAM,CAACe,CAAP,CAASD,MAAT,GAAkB,CAAlB,GAAsBF,CAA/B,CAAf,KAAmDb,MAAM,CAACc,CAAP,CAASD,CAAT,IAAcZ,MAAM,CAACa,CAAP,CAASb,MAAM,CAACa,CAAP,CAASC,MAAT,GAAkB,CAAlB,GAAsBF,CAA/B,CAAjE,CAAT;AACA,gBAAIK,EAAE,GAAGlB,MAAM,CAACgB,CAAP,CAASH,CAAT,IAAcI,EAAE,GAACjB,MAAM,CAACc,CAAP,CAASD,CAAT,CAA1B;AACAL,YAAAA,IAAI,CAACK,CAAD,CAAJ,GAAUI,EAAE,GAACV,IAAI,CAACM,CAAD,CAAP,GAAaK,EAAvB;AACA;AACD,SAfU,CAgBX;;;AACAd,QAAAA,aAAa,CAACG,IAAD,EAAOC,IAAP,CAAb,CAjBW,CAkBX;AACA;AACA,OApBD,MAqBI;AACHG,QAAAA,MAAM,CAACQ,aAAP,CAAqBT,YAArB;AACAL,QAAAA,YAAY,GAFT,CAGH;AACA;;AACDC,MAAAA,CAAC;AACD,KA5BkB,EA4BfJ,IAAI,GAACO,GA5BU,CAAnB;AA6BA,WAAOC,YAAP;AACA;AAnCe,CAAjB;AAsCA,eAAeZ,UAAf","sourcesContent":["let Animations = {\n\tmorph: (curve1, curve2, time /*time in seconds*/, fps /*frames per second*/,executewithin, executeafter = null) => {\n\t\tlet k = 0;\n\t\tlet tab1, tab2 = [];\n\t\tlet nbf = time*(fps/1000);\n\t\tvar maininterval = window.setInterval(function(){\n\t\t\tif(k <= nbf){\n\t\t\t\tif(k == 0){\n\t\t\t\t\tfor(let i = 0; i < curve1.X.length; i++){\n\t\t\t\t\t\ttab1[i] = curve1.X[i];\n\t\t\t\t\t\ttab2[i] = curve1.Y[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor(let i = 0; i < curve1.X.length; i++){\n\t\t\t\t\t\t//console.log((curve2.Y)[i] + (curve1.Y)[i])/2\n\t\t\t\t\t\ttab1[i] = k*(curve2.X[curve2.X.length - 1 - i] - curve1.X[i])/nbf + curve1.X[i];\n\t\t\t\t\t\tlet ai = (curve1.Y[i] - curve2.Y[curve2.Y.length - 1 - i])/(curve1.X[i] - curve2.X[curve2.X.length - 1 - i]);\n\t\t\t\t\t\tlet bi = curve1.Y[i] - ai*curve1.X[i];\n\t\t\t\t\t\ttab2[i] = ai*tab1[i] + bi;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t//console.log(tab2);\n\t\t\t\texecutewithin(tab1, tab2);\n\t\t\t\t//(new Curve2d(tab1, tab2, \"#3A539B\", 3)).draw();\n\t\t\t\t//console.log(\"Iteration number \" + k);\n\t\t\t}\n\t\t\telse{\n\t\t\t\twindow.clearInterval(maininterval);\t\n\t\t\t\texecuteafter();\n\t\t\t\t//tab2 = [];\t\n\t\t\t}\n\t\t\tk++;\n\t\t}, (time/nbf));\n\t\treturn maininterval;\n\t},\n};\n\nexport default Animations;"]},"metadata":{},"sourceType":"module"}