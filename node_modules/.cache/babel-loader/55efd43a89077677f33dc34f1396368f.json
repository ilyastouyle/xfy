{"ast":null,"code":"let Animations = {\n  morph: (curve1, curve2, time\n  /*time in seconds*/\n  , fps\n  /*frames per second*/\n  , executewithin, executeafter = null) => {\n    let k = 0;\n    let tab2 = [];\n    let nbf = time * (fps / 1000);\n    var maininterval = window.setInterval(function () {\n      if (k <= nbf) {\n        if (k == 0) {\n          for (var i = 0; i < curve1.X.length; i++) {\n            tab2[i] = curve1.Y[i];\n          }\n        } else {\n          for (var i = 0; i < curve1.X.length; i++) {\n            //console.log((curves[0].Y)[i] + (curves[1].Y)[i])/2\n            tab2[i] = curve2.Y[i] + (nbf - k) * (curve1.Y[i] - curve2.Y[i]) / nbf;\n          }\n        } //console.log(tab2);\n\n\n        executewithin();\n        new Curve2d(curve1.X, tab2, \"#3A539B\", 3).draw(); //console.log(\"Iteration number \" + k);\n      } else {\n        window.clearInterval(maininterval);\n        executeafter(); //tab2 = [];\t\n      }\n\n      k++;\n    }, time / nbf);\n    return maininterval;\n  }\n};\nexport default Animations;","map":{"version":3,"sources":["/var/www/html/xfy/src/Animations.js"],"names":["Animations","morph","curve1","curve2","time","fps","executewithin","executeafter","k","tab2","nbf","maininterval","window","setInterval","i","X","length","Y","Curve2d","draw","clearInterval"],"mappings":"AAAA,IAAIA,UAAU,GAAG;AAChBC,EAAAA,KAAK,EAAE,CAACC,MAAD,EAASC,MAAT,EAAiBC;AAAK;AAAtB,IAA2CC;AAAI;AAA/C,IAAqEC,aAArE,EAAoFC,YAAY,GAAG,IAAnG,KAA4G;AAClH,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,IAAI,GAAG,EAAX;AACA,QAAIC,GAAG,GAAGN,IAAI,IAAEC,GAAG,GAAC,IAAN,CAAd;AACA,QAAIM,YAAY,GAAGC,MAAM,CAACC,WAAP,CAAmB,YAAU;AAC/C,UAAGL,CAAC,IAAIE,GAAR,EAAY;AACX,YAAGF,CAAC,IAAI,CAAR,EAAU;AACT,eAAI,IAAIM,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,MAAM,CAACa,CAAP,CAASC,MAA5B,EAAoCF,CAAC,EAArC,EAAwC;AACvCL,YAAAA,IAAI,CAACK,CAAD,CAAJ,GAAUZ,MAAM,CAACe,CAAP,CAASH,CAAT,CAAV;AACA;AACD,SAJD,MAKI;AACH,eAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,MAAM,CAACa,CAAP,CAASC,MAA5B,EAAoCF,CAAC,EAArC,EAAwC;AACvC;AACAL,YAAAA,IAAI,CAACK,CAAD,CAAJ,GAAUX,MAAM,CAACc,CAAP,CAASH,CAAT,IAAc,CAACJ,GAAG,GAAGF,CAAP,KAAWN,MAAM,CAACe,CAAP,CAASH,CAAT,IAAcX,MAAM,CAACc,CAAP,CAASH,CAAT,CAAzB,IAAsCJ,GAA9D;AACA;AACD,SAXU,CAYX;;;AACAJ,QAAAA,aAAa;AACZ,YAAIY,OAAJ,CAAYhB,MAAM,CAACa,CAAnB,EAAsBN,IAAtB,EAA4B,SAA5B,EAAuC,CAAvC,CAAD,CAA4CU,IAA5C,GAdW,CAeX;AACA,OAhBD,MAiBI;AACHP,QAAAA,MAAM,CAACQ,aAAP,CAAqBT,YAArB;AACAJ,QAAAA,YAAY,GAFT,CAGH;AACA;;AACDC,MAAAA,CAAC;AACD,KAxBkB,EAwBfJ,IAAI,GAACM,GAxBU,CAAnB;AAyBA,WAAOC,YAAP;AACA;AA/Be,CAAjB;AAkCA,eAAeX,UAAf","sourcesContent":["let Animations = {\n\tmorph: (curve1, curve2, time /*time in seconds*/, fps /*frames per second*/,executewithin, executeafter = null) => {\n\t\tlet k = 0;\n\t\tlet tab2 = [];\n\t\tlet nbf = time*(fps/1000);\n\t\tvar maininterval = window.setInterval(function(){\n\t\t\tif(k <= nbf){\n\t\t\t\tif(k == 0){\n\t\t\t\t\tfor(var i = 0; i < curve1.X.length; i++){\n\t\t\t\t\t\ttab2[i] = curve1.Y[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor(var i = 0; i < curve1.X.length; i++){\n\t\t\t\t\t\t//console.log((curves[0].Y)[i] + (curves[1].Y)[i])/2\n\t\t\t\t\t\ttab2[i] = curve2.Y[i] + (nbf - k)*(curve1.Y[i] - curve2.Y[i])/nbf;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t//console.log(tab2);\n\t\t\t\texecutewithin();\n\t\t\t\t(new Curve2d(curve1.X, tab2, \"#3A539B\", 3)).draw();\n\t\t\t\t//console.log(\"Iteration number \" + k);\n\t\t\t}\n\t\t\telse{\n\t\t\t\twindow.clearInterval(maininterval);\t\n\t\t\t\texecuteafter();\n\t\t\t\t//tab2 = [];\t\n\t\t\t}\n\t\t\tk++;\n\t\t}, (time/nbf));\n\t\treturn maininterval;\n\t},\n};\n\nexport default Animations;"]},"metadata":{},"sourceType":"module"}