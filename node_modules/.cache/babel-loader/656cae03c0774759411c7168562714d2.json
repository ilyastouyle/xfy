{"ast":null,"code":"let Animations = {\n  morph: (curves, time\n  /*time in seconds*/\n  , fps\n  /*frames per second*/\n  , executewithin, executeafter = null) => {\n    let k = 0;\n    let tab1 = [],\n        tab2 = [];\n    let nbf = time * fps;\n    var maininterval = window.setInterval(function () {\n      if (k <= nbf) {\n        /*if(k == 0){\n        \tfor(let i = 0; i < curves[0].X.length; i++){\n        \t\ttab1[i] = curves[0].X[i];\n        \t\ttab2[i] = curves[0].Y[i];\n        \t}\n        }\n        else{\n        \tfor(let i = 0; i < curves[0].X.length; i++){\n        \t\t//console.log((curves[1].Y)[i] + (curves[0].Y)[i])/2\n        \t\ttab1[i] = k*(curves[1].X[curves[1].X.length - 1 - i] - curves[0].X[i])/nbf + curves[0].X[i];\n        \t\tlet ai = (curves[0].Y[i] - curves[1].Y[curves[1].Y.length - 1 - i])/(curves[0].X[i] - curves[1].X[curves[1].X.length - 1 - i]);\n        \t\tlet bi = curves[0].Y[i] - ai*curves[0].X[i];\n        \t\ttab2[i] = ai*tab1[i] + bi;\n        \t}\n        }*/\n        //console.log(tab2);\n        console.log(k);\n        executewithin(tab1, tab2); //(new curves[1]d(tab1, tab2, \"#3A539B\", 3)).draw();\n        //console.log(\"Iteration number \" + k);\n      } else {\n        window.clearInterval(maininterval); //executeafter();\n        //tab2 = [];\t\n      }\n\n      k++;\n    }, 1000 / nbf);\n    return maininterval;\n  }\n};\nexport default Animations;","map":{"version":3,"sources":["/var/www/html/xfy/src/Animations.js"],"names":["Animations","morph","curves","time","fps","executewithin","executeafter","k","tab1","tab2","nbf","maininterval","window","setInterval","console","log","clearInterval"],"mappings":"AAAA,IAAIA,UAAU,GAAG;AAChBC,EAAAA,KAAK,EAAE,CAACC,MAAD,EAASC;AAAK;AAAd,IAAmCC;AAAI;AAAvC,IAA6DC,aAA7D,EAA4EC,YAAY,GAAG,IAA3F,KAAoG;AAC1G,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,IAAI,GAAG,EAAX;AAAA,QAAeC,IAAI,GAAG,EAAtB;AACA,QAAIC,GAAG,GAAGP,IAAI,GAACC,GAAf;AACA,QAAIO,YAAY,GAAGC,MAAM,CAACC,WAAP,CAAmB,YAAU;AAC/C,UAAGN,CAAC,IAAIG,GAAR,EAAY;AACX;;;;;;;;;;;;;;;AAeA;AACAI,QAAAA,OAAO,CAACC,GAAR,CAAYR,CAAZ;AACAF,QAAAA,aAAa,CAACG,IAAD,EAAOC,IAAP,CAAb,CAlBW,CAmBX;AACA;AACA,OArBD,MAsBI;AACHG,QAAAA,MAAM,CAACI,aAAP,CAAqBL,YAArB,EADG,CAEH;AACA;AACA;;AACDJ,MAAAA,CAAC;AACD,KA7BkB,EA6Bd,IAAD,GAAOG,GA7BQ,CAAnB;AA8BA,WAAOC,YAAP;AACA;AApCe,CAAjB;AAuCA,eAAeX,UAAf","sourcesContent":["let Animations = {\n\tmorph: (curves, time /*time in seconds*/, fps /*frames per second*/,executewithin, executeafter = null) => {\n\t\tlet k = 0;\n\t\tlet tab1 = [], tab2 = [];\n\t\tlet nbf = time*fps;\n\t\tvar maininterval = window.setInterval(function(){\n\t\t\tif(k <= nbf){\n\t\t\t\t/*if(k == 0){\n\t\t\t\t\tfor(let i = 0; i < curves[0].X.length; i++){\n\t\t\t\t\t\ttab1[i] = curves[0].X[i];\n\t\t\t\t\t\ttab2[i] = curves[0].Y[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor(let i = 0; i < curves[0].X.length; i++){\n\t\t\t\t\t\t//console.log((curves[1].Y)[i] + (curves[0].Y)[i])/2\n\t\t\t\t\t\ttab1[i] = k*(curves[1].X[curves[1].X.length - 1 - i] - curves[0].X[i])/nbf + curves[0].X[i];\n\t\t\t\t\t\tlet ai = (curves[0].Y[i] - curves[1].Y[curves[1].Y.length - 1 - i])/(curves[0].X[i] - curves[1].X[curves[1].X.length - 1 - i]);\n\t\t\t\t\t\tlet bi = curves[0].Y[i] - ai*curves[0].X[i];\n\t\t\t\t\t\ttab2[i] = ai*tab1[i] + bi;\n\t\t\t\t\t}\n\t\t\t\t}*/\t\t\t\t\t\t\n\t\t\t\t//console.log(tab2);\n\t\t\t\tconsole.log(k);\n\t\t\t\texecutewithin(tab1, tab2);\n\t\t\t\t//(new curves[1]d(tab1, tab2, \"#3A539B\", 3)).draw();\n\t\t\t\t//console.log(\"Iteration number \" + k);\n\t\t\t}\n\t\t\telse{\n\t\t\t\twindow.clearInterval(maininterval);\t\n\t\t\t\t//executeafter();\n\t\t\t\t//tab2 = [];\t\n\t\t\t}\n\t\t\tk++;\n\t\t}, ((1000)/nbf));\n\t\treturn maininterval;\n\t},\n};\n\nexport default Animations;"]},"metadata":{},"sourceType":"module"}