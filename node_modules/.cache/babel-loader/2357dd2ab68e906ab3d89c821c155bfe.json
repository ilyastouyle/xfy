{"ast":null,"code":"let Animations = {\n  morph: (curves, time\n  /*time in seconds*/\n  , fps\n  /*frames per second*/\n  , executewithin, executeafter = null) => {\n    let k = 0;\n    let tab1,\n        tab2 = [];\n    let nbf = time * (fps / 1000);\n    var maininterval = window.setInterval(function () {\n      if (k <= nbf) {\n        if (k == 0) {\n          for (let i = 0; i < curves[0].X.length; i++) {\n            tab1[i] = curves[0].X[i];\n            tab2[i] = curves[0].Y[i];\n          }\n        } else {\n          for (let i = 0; i < curves[0].X.length; i++) {\n            //console.log((curve2.Y)[i] + (curves[0].Y)[i])/2\n            tab1[i] = k * (curve2.X[curve2.X.length - 1 - i] - curves[0].X[i]) / nbf + curves[0].X[i];\n            let ai = (curves[0].Y[i] - curve2.Y[curve2.Y.length - 1 - i]) / (curves[0].X[i] - curve2.X[curve2.X.length - 1 - i]);\n            let bi = curves[0].Y[i] - ai * curves[0].X[i];\n            tab2[i] = ai * tab1[i] + bi;\n          }\n        } //console.log(tab2);\n\n\n        executewithin(tab1, tab2); //(new Curve2d(tab1, tab2, \"#3A539B\", 3)).draw();\n        //console.log(\"Iteration number \" + k);\n      } else {\n        window.clearInterval(maininterval);\n        executeafter(); //tab2 = [];\t\n      }\n\n      k++;\n    }, time / nbf);\n    return maininterval;\n  }\n};\nexport default Animations;","map":{"version":3,"sources":["/var/www/html/xfy/src/Animations.js"],"names":["Animations","morph","curves","time","fps","executewithin","executeafter","k","tab1","tab2","nbf","maininterval","window","setInterval","i","X","length","Y","curve2","ai","bi","clearInterval"],"mappings":"AAAA,IAAIA,UAAU,GAAG;AAChBC,EAAAA,KAAK,EAAE,CAACC,MAAD,EAASC;AAAK;AAAd,IAAmCC;AAAI;AAAvC,IAA6DC,aAA7D,EAA4EC,YAAY,GAAG,IAA3F,KAAoG;AAC1G,QAAIC,CAAC,GAAG,CAAR;AACA,QAAIC,IAAJ;AAAA,QAAUC,IAAI,GAAG,EAAjB;AACA,QAAIC,GAAG,GAAGP,IAAI,IAAEC,GAAG,GAAC,IAAN,CAAd;AACA,QAAIO,YAAY,GAAGC,MAAM,CAACC,WAAP,CAAmB,YAAU;AAC/C,UAAGN,CAAC,IAAIG,GAAR,EAAY;AACX,YAAGH,CAAC,IAAI,CAAR,EAAU;AACT,eAAI,IAAIO,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,MAAM,CAAC,CAAD,CAAN,CAAUa,CAAV,CAAYC,MAA/B,EAAuCF,CAAC,EAAxC,EAA2C;AAC1CN,YAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUZ,MAAM,CAAC,CAAD,CAAN,CAAUa,CAAV,CAAYD,CAAZ,CAAV;AACAL,YAAAA,IAAI,CAACK,CAAD,CAAJ,GAAUZ,MAAM,CAAC,CAAD,CAAN,CAAUe,CAAV,CAAYH,CAAZ,CAAV;AACA;AACD,SALD,MAMI;AACH,eAAI,IAAIA,CAAC,GAAG,CAAZ,EAAeA,CAAC,GAAGZ,MAAM,CAAC,CAAD,CAAN,CAAUa,CAAV,CAAYC,MAA/B,EAAuCF,CAAC,EAAxC,EAA2C;AAC1C;AACAN,YAAAA,IAAI,CAACM,CAAD,CAAJ,GAAUP,CAAC,IAAEW,MAAM,CAACH,CAAP,CAASG,MAAM,CAACH,CAAP,CAASC,MAAT,GAAkB,CAAlB,GAAsBF,CAA/B,IAAoCZ,MAAM,CAAC,CAAD,CAAN,CAAUa,CAAV,CAAYD,CAAZ,CAAtC,CAAD,GAAuDJ,GAAvD,GAA6DR,MAAM,CAAC,CAAD,CAAN,CAAUa,CAAV,CAAYD,CAAZ,CAAvE;AACA,gBAAIK,EAAE,GAAG,CAACjB,MAAM,CAAC,CAAD,CAAN,CAAUe,CAAV,CAAYH,CAAZ,IAAiBI,MAAM,CAACD,CAAP,CAASC,MAAM,CAACD,CAAP,CAASD,MAAT,GAAkB,CAAlB,GAAsBF,CAA/B,CAAlB,KAAsDZ,MAAM,CAAC,CAAD,CAAN,CAAUa,CAAV,CAAYD,CAAZ,IAAiBI,MAAM,CAACH,CAAP,CAASG,MAAM,CAACH,CAAP,CAASC,MAAT,GAAkB,CAAlB,GAAsBF,CAA/B,CAAvE,CAAT;AACA,gBAAIM,EAAE,GAAGlB,MAAM,CAAC,CAAD,CAAN,CAAUe,CAAV,CAAYH,CAAZ,IAAiBK,EAAE,GAACjB,MAAM,CAAC,CAAD,CAAN,CAAUa,CAAV,CAAYD,CAAZ,CAA7B;AACAL,YAAAA,IAAI,CAACK,CAAD,CAAJ,GAAUK,EAAE,GAACX,IAAI,CAACM,CAAD,CAAP,GAAaM,EAAvB;AACA;AACD,SAfU,CAgBX;;;AACAf,QAAAA,aAAa,CAACG,IAAD,EAAOC,IAAP,CAAb,CAjBW,CAkBX;AACA;AACA,OApBD,MAqBI;AACHG,QAAAA,MAAM,CAACS,aAAP,CAAqBV,YAArB;AACAL,QAAAA,YAAY,GAFT,CAGH;AACA;;AACDC,MAAAA,CAAC;AACD,KA5BkB,EA4BfJ,IAAI,GAACO,GA5BU,CAAnB;AA6BA,WAAOC,YAAP;AACA;AAnCe,CAAjB;AAsCA,eAAeX,UAAf","sourcesContent":["let Animations = {\n\tmorph: (curves, time /*time in seconds*/, fps /*frames per second*/,executewithin, executeafter = null) => {\n\t\tlet k = 0;\n\t\tlet tab1, tab2 = [];\n\t\tlet nbf = time*(fps/1000);\n\t\tvar maininterval = window.setInterval(function(){\n\t\t\tif(k <= nbf){\n\t\t\t\tif(k == 0){\n\t\t\t\t\tfor(let i = 0; i < curves[0].X.length; i++){\n\t\t\t\t\t\ttab1[i] = curves[0].X[i];\n\t\t\t\t\t\ttab2[i] = curves[0].Y[i];\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\telse{\n\t\t\t\t\tfor(let i = 0; i < curves[0].X.length; i++){\n\t\t\t\t\t\t//console.log((curve2.Y)[i] + (curves[0].Y)[i])/2\n\t\t\t\t\t\ttab1[i] = k*(curve2.X[curve2.X.length - 1 - i] - curves[0].X[i])/nbf + curves[0].X[i];\n\t\t\t\t\t\tlet ai = (curves[0].Y[i] - curve2.Y[curve2.Y.length - 1 - i])/(curves[0].X[i] - curve2.X[curve2.X.length - 1 - i]);\n\t\t\t\t\t\tlet bi = curves[0].Y[i] - ai*curves[0].X[i];\n\t\t\t\t\t\ttab2[i] = ai*tab1[i] + bi;\n\t\t\t\t\t}\n\t\t\t\t}\t\t\t\t\t\t\n\t\t\t\t//console.log(tab2);\n\t\t\t\texecutewithin(tab1, tab2);\n\t\t\t\t//(new Curve2d(tab1, tab2, \"#3A539B\", 3)).draw();\n\t\t\t\t//console.log(\"Iteration number \" + k);\n\t\t\t}\n\t\t\telse{\n\t\t\t\twindow.clearInterval(maininterval);\t\n\t\t\t\texecuteafter();\n\t\t\t\t//tab2 = [];\t\n\t\t\t}\n\t\t\tk++;\n\t\t}, (time/nbf));\n\t\treturn maininterval;\n\t},\n};\n\nexport default Animations;"]},"metadata":{},"sourceType":"module"}